"""
View of the CV module.
All these views are based on the same template : themaintemplate.html and are
only a way to load it differently, namely :
* In its default state, showing all the hashtags
* With a hashtag loaded
* With a feature loaded in a hashtag
"""
import json

from django.shortcuts import get_object_or_404
from django.http import HttpResponse
from django.views.generic import ListView, View

from video.models import VideoIntroduction

from cv.models import Hashtag, Feature

class FetchObjectsMixin:
    """Mixin that adds the ability for a view to optionally fetch instances of
       models from the CV module"""

    def fetch_objects(self):
        """If their IDs was sent in the request, fetch a Hashtag object and a
           Feature object and stores them as attribute of the view"""
        self.hashtag = get_object_or_404(
            Hashtag, pk=self.kwargs['hashtag_id']
        ) if "hashtag_id" in self.kwargs else None
        self.feature = get_object_or_404(
            Feature, pk=self.kwargs['feature_id']
        ) if "feature_id" in self.kwargs else None

class TheMainTemplateView(ListView, FetchObjectsMixin):
    """Serves themaintemplate.html and make sure it has the needed variables in
       context"""
    model = Hashtag
    template_name = "themaintemplate.html"

    def get_context_data(self):
        """Feed the context with the Hashtag requested, opened either at the
           requested feature or at the its first feature """
        ctx = super(TheMainTemplateView, self).get_context_data()
        self.fetch_objects()

        if self.hashtag != None:
            ctx['hashtag'] = self.hashtag
            ctx['feature'] = self.feature if self.feature != None\
                else self.hashtag.features.all()[0]

        ctx['video'] = VideoIntroduction.objects.get(
            current=True).representation

        return ctx

#The views
class AjaxView(View, FetchObjectsMixin):
    """Serve JSON dictionaries."""
    def get(self, *args, **kwargs):
        """Take the dictionary generated by get_dict(), and sends it to the
           client"""
        self.fetch_objects()
        return HttpResponse(json.dumps(self.get_dict()),
                            content_type='application/json')
    def get_dict(self):
        """Implementation of this class generate the dictionary served by the
           instance of this class thanks to this method"""
        raise NotImplementedError

class HashtagAjaxView(AjaxView):
    """Sends informations about a Hashtag in JSON format"""
    def get_dict(self):
        return {'id': self.hashtag.id,
                'first_feature': self.hashtag.features.all()[0].id}

class FeatureAjaxView(AjaxView):
    """Sends informations about a Feature in JSON format"""
    def get_dict(self):
        """Sends informations about a Feature and the Feature following it in
           the list. If the current Feature is the last one, sends 'CLOSE'
           instead"""
        next_feature = None

        found = False
        for feature_itr in self.hashtag.features.all():
            if feature_itr == self.feature:
                found = True
            elif found is True and next_feature is None:
                next_feature = feature_itr
                break

        return {
            'id': self.feature.id,
            'representation': (
                self.feature.link_set.get(hashtag=self.hashtag).representation
            ),
            'next_feature_id': (
                next_feature.id if next_feature != None else "CLOSE"
            ),
        }

def switch_ajax(ajax_classbasedview):
    """Returns a view.
       This view will pass the request to another view. It chooses this view by
       checking if the request is done by an ajax client."""
    def view(request, *args, **kwargs):
        view = None
        if request.is_ajax():
            view = ajax_classbasedview.as_view()
        else:
            view = TheMainTemplateView.as_view()
        return view(request, *args, **kwargs)
    return view
